cmake_minimum_required(VERSION 3.2)

set(cmake_2_8_12_INTERFACE INTERFACE)
set(cmake_2_8_12_PRIVATE PRIVATE)
if(POLICY CMP0022)
    cmake_policy(SET CMP0022 NEW) # automatic when 2.8.12 is required
endif()

set(cmake_3_2_USES_TERMINAL USES_TERMINAL)

project(EMCPP)

function(append value)
    foreach(variable ${ARGN})
        set(${variable} "${${variable}} ${value}" PARENT_SCOPE)
    endforeach(variable)
endfunction()

append("-std=c++14" CMAKE_CXX_FLAGS)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/lib)

set(CMAKE_INCLUDE_CURRENT_DIR ON)

add_executable(ch1-item01 ch1-item01.cc)
add_executable(ch1-item02 ch1-item02.cc)
add_executable(ch1-item03 ch1-item03.cc)
add_executable(ch1-item04 ch1-item04.cc)
add_executable(ch2-item05 ch2-item05.cc)
add_executable(ch2-item06 ch2-item06.cc)
add_executable(ch3-item07 ch3-item07.cc)
add_executable(ch3-item08 ch3-item08.cc)
add_executable(ch3-item09 ch3-item09.cc)
add_executable(ch3-item10 ch3-item10.cc)
add_executable(ch3-item11 ch3-item11.cc)
add_executable(ch3-item12 ch3-item12.cc)
add_executable(ch3-item13 ch3-item13.cc)
add_executable(ch3-item14 ch3-item14.cc)
add_executable(ch3-item15 ch3-item15.cc)
add_executable(ch3-item16 ch3-item16.cc)
add_executable(ch3-item17 ch3-item17.cc)
add_executable(ch4-item18 ch4-item18.cc)
add_executable(ch4-item19 ch4-item19.cc)
add_executable(ch4-item20 ch4-item20.cc)
add_executable(ch4-item21 ch4-item21.cc)
add_executable(ch4-item22 ch4-item22.cc)
add_executable(ch5-item23 ch5-item23.cc)
add_executable(ch5-item24 ch5-item24.cc)
add_executable(ch5-item25 ch5-item25.cc)
